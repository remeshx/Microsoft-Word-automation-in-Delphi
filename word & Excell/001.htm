<!-- Vignette StoryServer 4 Sun Oct 23 15:51:57 2005 -->
 
   <!-- Vignette StoryServer 4 Wed Oct 26 09:25:16 2005 -->

	
   

        
   

        <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>

<HEAD>

<TITLE>Delphi 3 - Delphi and Microsoft Office: Automating Excel and Word</TITLE>

 <META NAME="KEYWORDS" CONTENT=""> 
 <META NAME="DESCRIPTION" CONTENT="The goal of this two-part paper is to get you up to speed automating Excel and Word from a Delphi application. ">

<LINK REL="stylesheet" TITLE="Default" HREF="http://bdn.borland.com/styles/defaultNew.css" TYPE="text/css">
<LINK REL="stylesheet" TITLE="Default" HREF="http://bdn.borland.com/styles2005.css" TYPE="text/css">
<LINK REL="stylesheet" TITLE="Default" HREF="http://bdn.borland.com/styles/bdn.css" TYPE="text/css">
<script type="text/javascript" src="http://bdn.borland.com/javascript/library.js"></script>
<script type="text/javascript" src="http://bdn.borland.com/javascript/hide_show.js"></script>
<!--Site Level a -->
</HEAD>
<BODY BGCOLOR="#FFFFFF">
 
<A NAME="top"></A><!-- Vignette StoryServer 4 Wed Oct 26 09:25:16 2005 -->

 <!-- Site level is a -->

      
		
	  
	 
 <div id="borland-sites">
	<ul>
		<li class="first-site"><div><a href="http://www.borland.com/">Borland.com</a></div></li>

		<li class="selected"><div><A HREF="/">Borland Developer Network</a></div></li>
		<li><div><a href="http://support.borland.com">Borland Support Center</a></div></li>
		<li><div><a href="http://borland.ewebsmartlink.com/">Borland University</a></div></li>
		<li><div><a href="http://www.borland.com/ww/">Worldwide Sites</a></div></li>
		<li class="country-label"><A HREF="https://bdn.borland.com/cgi-bin/login/"><!-- Vignette StoryServer 4 Wed May 22 12:08:43 2002 -->
<A HREF="https://bdn.borland.com/cgi-bin/login/" CLASS="bigBlack">Login</a></A></li>
	</ul>
</div>


<br style="clear:both"/>
		<div id="logo-area"> <a href="/"><img src="/images/logo-area/bdnetwork2.gif" width="326" height="40" alt="Borland" border="0" id="logo" /></a>
		<div id="toolbar">
                
                  <form name="search" method="get" action="http://www.google.com/custom"><ul>
				 <LI><A HREF="https://bdn.borland.com/cgi-bin/login/">My Account </A></LI>  
				  <li><img src="/images/logo-area/toolbar_separator.gif" alt="" height="20" width="2" /></li><li><a href="/info/">Help</a></li><li><img src="/images/logo-area/toolbar_separator.gif" alt="" height="20" width="2" /></li><li class="searchbox"><input type="text" name="q" size="31" maxlength="255" value="" /></li><li><img src="/images/logo-area/toolbar_separator.gif" alt="" height="20" width="2" /></li><li><a href="javascript:void document.search.submit()" class="search">Search</a></li></ul><input type="hidden" name="cof" value="S:http://bdn.borland.com;AH:left;BGC:#FFFFFF;LH:51;LC:#0000FF;L:http://bdn.borland.com/images/topnav/bdnetwork2.gif;LW:383;T:#000000;AWFID:beeeba6b5662a726;" />

  <input type="hidden" name="sitesearch" value="" />
  <input type="hidden" name="sitesearch" value="borland.com" />
  <input type="hidden" name="domains" value="borland.com" />
  </form>
</div>


</div>	


<!-- BEGIN: Primary Navigation -->
<div id="primary-nav"> 
 <div id="primary-nav-top"></div>
  <ul id="primarynav">
    <li  ><a href="#" ><IMG SRC="/images/primary-nav/application_lifecycle.gif" BORDER="0" WIDTH="131" HEIGHT="7" TITLE="Application Lifecycle"></a>
	   <ul>
        <li><a href="/caliberrm" >CaliberRM</a></li> 
        <li><a href="/together" >Together</a></li>
 	    <li><a href="/java" >JBuilder</a></li>
        <li><a href="/starteam" >StarTeam</a></li> 
       </ul>
    </LI> 
    <li  ><a href="#"><IMG SRC="/images/primary-nav/ide.gif" BORDER="0" WIDTH="18" HEIGHT="7" TITLE="IDE"></A>
		<ul>
               	<li><a href="/java" >Java</a></li>
				<li><a href="/delphi" >Delphi</a></li>
				<li><a href="/csharp" >C#</a></li>
       			<li><a href="/cpp" >C++</a></li>
      	</ul>
    </li>
   <li  ><a href="#" ><IMG SRC="/images/primary-nav/application_middleware.gif" BORDER="0" WIDTH="150" HEIGHT="7" TITLE="Application Middleware"></A>
      <ul>
        <li><a href="/appserver">AppServer</a></li>
	    <li><a href="/corba" >VisiBroker</a></li>
 		<li><a href="/interbase" >InterBase</a></li>
        <li><a href="/jdatastore" >JDataStore</a></li>
      </ul>
    </li>
    <li   ><a href="#"><IMG SRC="/images/primary-nav/more_resources.gif" BORDER="0" WIDTH="101" HEIGHT="7" TITLE="More Resources: Examples, Tools, Bugs, GetPublished, Events, Museum, etc."></a> 
      <ul>
     	<li><a href="/bdntv" TITLE="View product demonstrations & listen to Borland's developers and management." >BDN TV &amp; Radio</a></li>
  		<li><a href="http://blogs.borland.com" >Blogs</a></li>
		<li><a href="/books" TITLE="Find books covering Borland products." >Books</a></li>
		<li><a href="http://qc.borland.com" Title="Submit bugs and feature requests. Also known as QualityCentral." >Bugs &amp; Suggestions</a></li>
		<li><a href="/chat" >Chat</a></li>
		<li><a href="/borcon" TITLE="Browse the rich resources of Borland's Annual Developer Conference Procedings." >Conference Proceedings</a></li>	
		<li><a href="http://ec.borland.com" Title="View Borland related events in your area and post your own." >Events</a></li>
		<li><a href="http://cc.borland.com" Title="Examples, code, etc.. Also known as CodeCentral." >Examples</a></li>
       	<li><a href="/getpublished" TITLE="Submit your own articles to bdn for publication and get paid." >GetPublished</a></li>
		<li><a href="/museum" TITLE="Download antique versions of Borland software." >Museum</a></li>
  		<li><a href="http://support.borland.com/newsgroups" >Newsgroups</a></li>
	 <li><a href="http://news.borland.com" Title="Listings of bdn articles in XML format." >News Feeds</a></li> 
	  <li><a href="http://shop.borland.com" Title="Purchase Borland products online." >Shop</a></li> 
	 <li><a href="http://btp.borland.com" Title="Browse the Borland Technology Partners database." >Technology Partners</a></li>
      </ul>
    </li>
 </ul>
  
			
</div>
<!-- END: Primary Navigation -->		
	
<div id="mast"> 
</div><P>&nbsp;</P><P> </P>

<!-- Vignette StoryServer 4 Wed Oct 26 01:20:41 2005 -->
 

     

           
              
          <!-- BEGIN: Page Body ContentTable starts here-->

<table cellpadding="0" cellspacing="0" border="0" id="channels">
  <tr>
<td id="channel-spacer-sm">&nbsp;</td>


<td id="channel-spacer">&nbsp;</td>

<td class="content-channel">
	<div id="content">




    <!-- Vignette StoryServer 4 Wed Oct 26 09:07:21 2005 -->
 



<SCRIPT LANGUAGE=JavaScript>

  function ResourceWin(hurl) {
wid = window.open(hurl, "ResourceWin",
"toolbar=yes,status=no,directories=no,location=no,scrollbars=yes,width=1000,height=700,resizable=yes","true");
}
  

</SCRIPT>


 

	
			  <META NAME="author" CONTENT="Charles Calvert">
<META NAME="id" CONTENT="10126">
<META NAME="date" CONTENT="May 05 1997 12:00:00:000AM">
<META NAME="creationdate" CONTENT="Sep 24 1999 06:27:32:000AM">
<META NAME="type" CONTENT="White Paper">
<META NAME="visibility" CONTENT="Public">
<META NAME="product" CONTENT="">

<META NAME="platform" CONTENT="">

<P>&nbsp;<BR>

<SPAN CLASS="title3">Delphi 3 - Delphi and Microsoft Office: Automating Excel and Word</SPAN>
<SPAN CLASS="contentSectionHeading">  - by  Charles Calvert</SPAN><BR>
<BR>		
<!-- Vignette StoryServer 4 Wed Oct 26 09:25:16 2005 -->
     
		    



          
	   
	   
	   
	   
	        Rating: 
<A HREF="#rating">

<!-- Vignette StoryServer 4 Wed Oct 26 03:05:17 2005 -->

	 
	 
	 
	 
	 <IMG SRC="/images/icons/star_4.gif" ALT="Rating is 3.5 - 4.5" width='65'  height='12'  BORDER='0'></a>
&nbsp; &nbsp;
Ratings:&nbsp;15 &nbsp; &nbsp; <A HREF="#rating">Rate it</A><BR>

  <!-- end of rating summary component-->

<BLOCKQUOTE CLASS="abstract"><B>Abstract:</B> The goal of this two-part paper is to get you up to speed automating Excel and Word from a Delphi application. &nbsp;</BLOCKQUOTE><P>
 
<TABLE BORDER='0' CELLPADDING='0' CELLSPACING='0'>
<TR><TD VALIGN='TOP'>
   
<FONT SIZE="5"><B>Delphi and Microsoft Office:<BR>
Automating Excel and Word</B></FONT><BR>
<FONT SIZE="3">Copyright &copy; 1997 by Charlie Calvert</FONT><BR>
<FONT SIZE="2">Here is the <A HREF="/article/images/10126/examples.zip">examples.zip</A> file.</FONT>
<P>
<UL>
<A HREF="#introduction"><IMG SRC="/images/dingbat/blue_arrow.gif" HEIGHT="16" WIDTH="20" BORDER="0">Introduction</A><BR>
<A HREF="#system_reqs"><IMG SRC="/images/dingbat/blue_arrow.gif" HEIGHT="16" WIDTH="20" BORDER="0">System Requirements</A><BR>
<A HREF="#getting_started"><IMG SRC="/images/dingbat/blue_arrow.gif" HEIGHT="16" WIDTH="20" BORDER="0">Getting Started with Delphi and Excel</A><BR>
<A HREF="/article/0,1410,10127,00.html#creating_objs"><IMG SRC="/images/dingbat/blue_arrow.gif" HEIGHT="16" WIDTH="20" BORDER="0">Creating Excel Automation Objects</A><BR>
<A HREF="/article/0,1410,10127,00.html#understand_objs"><IMG SRC="/images/dingbat/blue_arrow.gif" HEIGHT="16" WIDTH="20" BORDER="0">Understanding Excel Automation Objects</A><BR>
<A HREF="/article/0,1410,10128,00.html#constants"><IMG SRC="/images/dingbat/blue_arrow.gif" HEIGHT="16" WIDTH="20" BORDER="0">Finding the Constants used in Excel</A><BR>
<A HREF="/article/0,1410,10128,00.html#data"><IMG SRC="/images/dingbat/blue_arrow.gif" HEIGHT="16" WIDTH="20" BORDER="0">Storing and Accessing Data in an Excel Worksheet</A><BR>
<A HREF="/article/0,1410,10128,00.html#range"><IMG SRC="/images/dingbat/blue_arrow.gif" HEIGHT="16" WIDTH="20" BORDER="0">Working with Columns and Range Attributes</A><BR>
<A HREF="/article/0,1410,10129,00.html#chart"><IMG SRC="/images/dingbat/blue_arrow.gif" HEIGHT="16" WIDTH="20" BORDER="0">Creating a Chart</A><BR>
<A HREF="/darticle/0,1410,10130,00.html#copying"><IMG SRC="/images/dingbat/blue_arrow.gif" HEIGHT="16" WIDTH="20" BORDER="0">Copying Data from Excel to Word</A><BR>
<A HREF="/article/0,1410,10130,00.html#automation"><IMG SRC="/images/dingbat/blue_arrow.gif" HEIGHT="16" WIDTH="20" BORDER="0">Automation Inside Word</A><BR>
<A HREF="/article/0,1410,10130,00.html#mailing"><IMG SRC="/images/dingbat/blue_arrow.gif" HEIGHT="16" WIDTH="20" BORDER="0">Mailing a Document</A><BR>
<A HREF="/article/0,1410,10130,00.html#summary"><IMG SRC="/images/dingbat/blue_arrow.gif" HEIGHT="16" WIDTH="20" BORDER="0">Summary</A><BR>
</UL>
<P>

<A NAME="introduction">The goal of</A> this two-part paper is to get you up to speed automating Excel and Word from a Delphi application. Most of the text will focus on Excel, but you will find that if you understand Excel automation, that you need only a few hints to get started automating Word. If you are primarily interested in Word, I ask you to patiently read through the material on Excel, as almost all of it applies to Word.
<P>
You can use Delphi to fully control virtually all the features of Excel and Word. There is very little that you can do from inside Excel or Word that you cannot also automate from outside Excel or Word. In other words, both Excel and Word can be fully controlled from Delphi applications using OLE Automation.
<P>
For the most part the act of controlling Excel or Word from a Delphi application is not terribly challenging. Whatever difficulty there is comes not from Delphi's side of the equation, but from the innate complexity of the Excel and Word object hierarchies. Not that I find the hierarchies unreasonable, but they do encapsulate sufficient complexity to require a significant period of study. In particular, these automation classes give you rather detailed control over Word and Excel. Since these are complex applications, the interface to them also needs to be complex if it is not to be considered under powered. The purpose of this paper is to unscramble that hierarchy and show its underlying structure.
<P>
This paper is divided into two parts. The first part shows automating Word and Excel using variants and IDispatch, and the second part shows how to perform the same tasks with dispinterfaces and standard COM interfaces. All of these technologies are closely related. However, there are two significant differences between them:
<P>
<OL>
<LI>Using variants is usually the easiest, the most terse, but also the slowest way to get things done in terms of performance.
<LI>Using COM interfaces is usually the most difficult, the most verbose, but also yields the highest performance.
</OL>
<P>
There may be a short gap between the time the first and second parts of the paper are published.
<P>
When writing this paper I have attempted to explain things as clearly as possible. I'm aiming this paper primarily at intermediate or experienced programmers, but I hope it is accessible to anyone who has a basic understanding of how to use Delphi, Word and Excel. Though you should not need a high level of expertise to understand this paper, I am trying to cover the subject in some depth. Other sources, such as my book <I>Dephi 2 Unleashed (Chapter 29)</I>, and the magazine the <I>Delphi Informant</I> (June 1997), covers some of this same material in a simpler, less in depth fashion. For many people a more high level, abstracted view may be more appropriate. But I believe there is also a big need for a more detailed look at this subject, which is why I have written this paper. 
<P>
One final note: in my writing, I tend to use repetition to emphasize important points. This is a consciously exercised technique designed to make this paper as easy as possible to understand, while simultaneously ensuring that you don't accidentally skip over an essential point. Another benefit of repetition is that people tend to use articles of this type as a reference. As a result, they don't always read them from beginning to end every time they refer to them. As a result, it helps to give a one sentence review of key points that relate to the topic under discussion.
<P>

<B><U><A NAME="system_reqs">System Requirements</A></U></B><BR>
This paper was written against Delphi 3.01 and Microsoft Office 97. Portions of the paper would also work with Office 95, but the sections on interfaces, in particular, require that you use Office 97.
<P>
To perform automation successfully with Excel or Word you need a fairly powerful system with lots of RAM. I've been automating Excel for at least four years. When I first started out, I considered the technology a bit suspect simply because it was terribly slow. Now, however, our machines are powerful enough to take Excel through its paces in a few short moments. In particular, if you have a Pentium 120 class machine or above, and at least 48 MB of ram, then this technology works well for many types of projects. Excel or Word will now load quite quickly, and you can open and insert data into them in the blink of an eye. However, if you want to iterate over lots of data inside a Word or Excel document, then that can be a bit time consuming when compared to performing similar tasks inside of a Delphi application.
<P>
The bottom line here is that if you know Excel can do something well, and you know your target machines are powerful and will have Excel loaded on them, then there is no reason to search for third party components to perform spreadsheet related functions. Instead, you can just automate Excel from inside a Delphi application and get your work done professionally in just a few short hours. The icing on the cake is that you can then use MAPI to mail the results of your work to anyone who has a mail system and the ability to read Excel files. The point being that the recipient of your work need not actually have a copy of your Delphi application running when viewing the output from your program. Instead you can just send them the results in an Excel or Word document. Word document viewers can be downloaded for free from Microsoft's web site at www.microsoft.com.
<P>

<B><U><A NAME="getting_started">Getting Started with Delphi and Excel</A></U></B><BR>
There are two different ways to run OLE automation from inside Delphi. One involves using interfaces, while the second involves using an OLE class called <U>IDispatch</U> along with a Delphi type called a variant. Interfaces give you the advantage of type checking your code on the client side, as well as relatively high performance. However, I am going to start the paper working with the somewhat easier to understand <U>IDispatch</U> and variants technology, and move on to cover interfaces after all the basics are clearly established. Do not worry if you don't yet understand the differences between the two techniques, as this subject will be cleared up over the course of the paper. At this stage, you just need to be aware that there are at least two ways to access OLE automation objects from Delphi, and that I am going to start out by showing you one that uses <U>IDispatch</U> and variants.
<P>
The following code, found in Listing 1, shows a bare bones example of a Delphi application that launches Excel. Just skim over the code for now, as I will spend the rest of this section of the paper explaining how it works.
<P>
<B>Listing 1: The main form from the Excel1 application found with the code samples that accompany this article.</B>
<P>
</FONT>
<CODE>
<PRE>
unit Main;

interface

uses
  Windows, Messages, SysUtils,
  Classes, Graphics, Controls,
  Forms, Dialogs, StdCtrls;

type
  TForm1 = class(TForm)
    Button1: TButton;
    procedure Button1Click(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
  private
  public
    V: Variant;
  end;

var
  Form1: TForm1;

implementation

uses
  ComObj;

{$R *.DFM}

procedure TForm1.Button1Click(Sender: TObject);
begin
  V := CreateOleObject('Excel.Application');
  V.Visible := True;
end;

procedure TForm1.FormDestroy(Sender: TObject);
begin
  if not VarIsEmpty(V) then
    V.Quit;
end;

end.
</PRE>
</CODE>
<FONT SIZE="2">
<P>
You can find this example on disk, in the program called Excel1.dpr. The code does nothing more than create an instance of Excel, make it visible, and then close it down when the user exists the Delphi application. The code does not check to make sure the user is not creating multiple instances of the application, but it does close down a single copy of Excel when you exit. 
<P>
From Delphi's side, you should always start your automation applications by including COMObj in the <U>uses</U> clause. COMObj contains routines for retrieving OLE automation objects, and for dispatching calls to them. In particular, you usually use <U>CreateOleObject</U> to retrieve an automation object, and behind the scenes Delphi uses the COMObj routines <U>VarDispInvoke</U>, <U>DispatchInvoke</U> and <U>GetIDsOfNames</U>, to call an object. I will give you a bit more information on these routines in just one moment. The rest is simply a matter of using a built in Delphi type called a <U>variant</U> to reference the objects that reside inside Excel.
<P>
Here are a few simple lines of code that launch Excel from inside Delphi:
<P>
</FONT>
<CODE>
<PRE>
var
  V: Variant;
begin
  V := CreateOleObject('Excel.Application');
  V.Visible := True;
end;
</PRE>
</CODE>
<FONT SIZE="2">
<P>
The first line of code after the <U>begin</U> statement launches Excel. The call to CreateOleObject is relatively complex, so I will explain it in the next section of the paper.
<P>
After executing the first line, Excel will come up in the background, entirely offscreen, invisible to the user. This may, in fact, be the effect you want to achieve. However, when you first start out programming Excel, and whenever you are debugging your Excel automation application, you probably want to be able to see what is going on inside Excel. Therefore, I set the <U>Visible</U> property of the Excel <U>Application</U> object equal to <U>True</U>. This ensures that you can see what is actually happening on the Excel server. If you have thoroughly debugged your application you may want to skip this step, but I will include it in all the <A HREF="/delphi/papers/microexcel/examples.zip">examples.zip</A> I cover in this paper.
<P>
Of course, I haven't told you enough yet to make the code shown above entirely comprehensible. What is the purpose, for instance, of the variable <U>V</U>? What does <U>CreateOleObject</U> actually do?
<P>
As it turns out, the answers to these questions are non-trivial. The variable <U>V</U> is a <U>variant</U>, and <U>CreateOleObject</U> creates an instance of a COM object called <U>IDispatch</U> and returns it to you inside a <U>variant</U>. But saying as much doesn't help much if you don't understand COM, <U>IDispatch</U>, and <U>variants</U>.
<P>
There are three courses I could take at this point. One would involve an in depth explanation of COM and OLE, a second would give you only the minimal amount of information needed to keep going, and the third would be to find some middle ground. In this case I am going to opt for the latter solution, and leave it up to you to pursue COM in more depth on your own. I will however, discuss this subject over the next few paragraphs, and come back to it again in the second part of the paper. If you want even more information, some references to get you started are as follows:
<P>
<UL>
<LI>I have an article on <I>Delphi and DCOM</I> on my WEB site: <A HREF="http://users.aol.com/charliecal">http://users.aol.com/charliecal</A>, and also cover the subject in the book <I>Delphi 2 Unleashed</I>.
<LI>Microsoft has extensive documentation on this subject: <A HREF="http://www.microsoft.com/com">http://ww.microsoft.com/com</A>
<LI>The User's Guide from the Delphi 3 docs contains some text on this subject in Chapter 25.
</UL>
<P>
The only thing you really need to know at this stage is that Microsoft has created a special type of object oriented programming called COM, which allows you to retrieve and call the methods of an object from a number of different languages. The COM object model is different from the one used by native Delphi programmers, so Borland gives you two choices:
<P>
You can followed Microsoft's lead and call the methods of these special objects off a variable type called a variant. This is the technique described in the first part of this paper.
<P>
You can follow a second, more technical approach and use <U>interfaces</U> or <U>dispinterfaces</U>.
<P>
One of the key differences between using interfaces and using variants is that interfaces allow you to call COM objects using the much faster dispatching technologies native to Object Pascal. As I will explain in Part II of this article, dispinterfaces follow a middle path between the variant technology and the interface technology.
<P>
COM is the underlying object model that makes OLE and ActiveX programming possible. At times I will use OLE and COM as virtual synonyms. ActiveX is yet a third very closely related technology, but I will not touch on it in this paper. However, it no longer incorrect to also use the words COM and ActiveX as virtual synonyms.
<P>
<U>Variants</U> get their name because they can provide a wide <I>variety</I> of functions, depending on the circumstances. For instance, they can contain a string, an integer, or, in special cases, a COM object. In other words, the type of variable held in a variant <I>varies</I> from one occasion to the next. That's why they call them variants. (For more information, look up &quot;Variant Types&quot; in the Delphi online help, or else look at the declarations for the structures used with <U>variants</U> at the top of System.pas.)
<P>
<U>CreateOleObject</U> calls a number of internal system wide OLE functions. The end result of these series of calls is that the function returns a COM object to you containing an <U>interface</U> to the object you want to call. In particular, you get back a <U>variant</U> that is wrapped around a COM object called <U>IDispatch</U>. A combination of the built in <U>IDispatch</U> methods, and various Delphi technologies covered briefly later in this paper, allows you to call the methods of the object your requested.
<P>
With all this in mind, let's go back and view the two lines of code that retrieve the Excel object:
<P>
</FONT>
<CODE>
<PRE>
 V := CreateOleObject('Excel.Application');
 V.Visible := True;
</PRE>
</CODE>
<FONT SIZE="2">
<P>
The first line of code asks for an object that resides inside Excel called <U>Application</U>. <U>CreateOleObject</U> retrieves an instance of the object in the form of an <U>IDispatch</U> interface encapsulated inside a variant called <U>V</U>. This variant is valuable to you because it allows you to call the methods and properties of the Excel object using a very simple syntax. For instance, you can access the <U>Visible</U> property of the object by simply writing <U>V.Visible := True</U>.
<P>
It would be mistake, however, to assume that the line of code containing the Visible property is doing the same thing as a standard Delphi line of code that looks like this:
<P>
</FONT>
<CODE>
<PRE>
Form1.Visible := True;
</PRE>
</CODE>
<FONT SIZE="2">
<P>
Admittedly these two lines look the same, and have exactly the same syntax. But internally, something very different is going on. In particular, if you call the <U>Visible</U> property of a Delphi form object then the property is changed almost instantly. Calling the <U>Visible</U> property of an OLE automation <U>variant</U> sets off a series of internal events that end up resulting in a change to the <U>Visible</U> property of an object inside Excel, but there are many steps that occur along the way. In particular, several methods of <U>IDispatch</U> such as <U>GetIDsOfNames</U> and <U>Invoke</U> must first be called behind the scenes before the call is complete.
<P>
This paper is not designed to cover the mechanisms used in dispatching a call on a variant encapsulated COM object, nor is it necessary for you to understand how it works in order to use this technology. The key point to grasp is merely that things aren't quite as simple as they at first appear. Having said all that, I will now show you how to get into this subject a bit deeper if you so desire, and if you have the source to the VCL on your machine.
<P>
To get started, copy COMObj.pas and COMObj.inc from the Delphi SourceRtlSys directory to the same directory where Excel1 is stored. Now rebuild the project so these local copies of COMObj are linked into your program. Put a breakpoint on the line <U>V.Visible := True</U>, and then run the program. When you get to the breakpoint, press F7 to step into the code. You will find that you are taken immediately to the <U>VarDispInvoke</U> method found in COMObj.pas. From there you will go to <U>GetIDsOfNames</U>, and finally to <U>DispatchInvoke</U>. What is happening here is that the appropriate methods of the IDispatch interface are being called behind the scenes by Delphi in order to &quot;invoke&quot; your call to Excel.
<P>
One of the lessons to be learned from this is that at bottom, there is not such a big difference between the interface technology shown in the second part of this paper and the variant based technology I am discussing here. For instance, IDispatch is an interface, and ultimately this interface must be called for the variant based technology to work. In fact, IDispatch is designed in such a way as to make the variant based technology even more complex than the standard interface technology seen in the second half of this paper. Only Delphi is able to hide that complexity from you, so that you do not need to understand it at all in order to use variants to call automation objects. (Once again, I need to emphasize that I am not giving a full explanation of this technology in this paper. If you want to really understand IDispatch, then you should check out the resources mentioned earlier in this section of the paper.)
<P>
One of the biggest consequences of calling the methods of an object off a variant is that Delphi cannot type check your code at design time. In other words, Delphi does not really know whether or not the Excel Application object has a property called Visible. It is taking you at your word when you claim this is true. In this case, that proves to be the correct thing to do. However, it would also compile without error the following code:
<P>
</FONT>
<CODE>
<PRE>
V.TransferMoney("From := Bill Gates", "To := Charlie Calvert", 100000);
</PRE>
</CODE>
<FONT SIZE="2">
<P>
This line of code is certainly intriguing, but the Excel Application object unfortunately does not support it. This means that a program containing it will compile and load without error, but a call to the TransferMoney property at run time will raise an exception. Both Delphi and Excel are able to handle this exception flawlessly, without destabilizing the system in any way. It is nice, however, if you can type check at design time, rather than having to wait to run time to see if all is set up correctly. The interface and dispinterface technologies covered in Part II of this paper shows how to get design time type checking of OLE objects.
<P>
I've spent the last several paragraphs describing <U>IDispatch</U> and <U>variants</U>. This is an important subject, but one that you need not understand in depth in order to use this technology. If all is not clear to you yet, you can still continue without fear. If you are hungry for more details, be patient and I will return to this subject Part II, or else you should follow the links shown earlier in this section.
<P>
After you have created an Excel Application object, you need some way to close it down. You can do this by calling its <U>Quit</U> method:
<P>
</FONT>
<CODE>
<PRE>
if not VarIsEmpty(V) then
  V.Quit;
</PRE>
</CODE>
<FONT SIZE="2">
<P>
What this code does is check to make sure that the <U>variant</U> <U>V</U> refers to something, and then it attempts to call the <U>Quit</U> method of the Excel application object. If <U>V</U> is indeed a valid pointer to such an object, then Excel will close. This code is not perfect in all cases, since <U>V</U> could contain a reference to something other than an Excel Application object, thereby allowing <U>VarIsEmpty</U> to return true, even though the call to <U>V.Qui</U>t would fail. For instance, I could write:
<P>
</FONT>
<CODE>
<PRE>
V := 10;
</PRE>
</CODE>
<FONT SIZE="2">
<P>
After making this call <U>VarIsEmpty</U> would return false, but the call to <U>V.Quit</U> would obviously fail. However, in the Excel1 application, found in Listing 1, <U>V</U> will usually be either empty, or else pointing to a COM object. Therefore the code is reasonably robust. The key point, at any rate, is that you don't want to fail to <U>Quit</U> the <U>Application</U> object or else you can end up cluttering memory with instances of this object. Remember that Excel owns the <U>Application</U> object, and it will not necessarily be removed from memory just because you close your Delphi application. In other words, you should definitely call <U>Application</U> <U>Quit</U> or else repeated calls to Excel from a Delphi application will bog down your machine by draining system resources.
   
</TD></TR></TABLE><P ALIGN="LEFT">
<P>


   <A HREF="/article/0,1410,10127,00.html" CLASS="heading3">Forward to Next Part</A>
<div id="toolbar2">
                
                  <ul>
				 <LI><form name="shop" method="post" action="/article/shopReferal/1,1980,10126,00.html">
		&nbsp;<a href="javascript:void document.shop.submit()" class="shop">Shop Borland</a>&nbsp;
		</form></LI>  
				  <li><img src="/images/logo-area/toolbar_separator.gif" alt="" height="20" width="2" /></li>
				  <li><form name="download" method="get" action="http://www.borland.com/products/downloads/index.html">
		 &nbsp;<a href="javascript:void document.download.submit()" class="downloads">Downloads</a>&nbsp;
		</form></li></UL>
</div>



<P>

 </SPAN>
<P>
<!-- Vignette StoryServer 4 Wed Oct 26 09:25:19 2005 -->
     
      
		   
		  



          
	    
	    
	    
	    
	      <!-- # of 1s: 0, # of 2s:0, # of 3s:0, # of 4s:8, # of 5s:7 8 is max, 10 is scalar, 0 is bar1a
10126 is contentid-->

    <form method=post action=/article/rating/save/1,1930,10126,00.html>

    <table  border="0" cellspacing="0" ALIGN="left" VALIGN="Bottom">
  <TR height="1">
  	<TD COLSPAN="11" ><!-- Vignette StoryServer 4 Wed Oct 26 03:05:16 2005 -->

	
	
	 
	 
	 <IMG SRC="/images/layout/bar_blue.gif" ALT="Blue Bar" width='700'  height='1'  BORDER='0'><!-line-></TD>
  </TR>
  <TR VALIGN="BOTTOM" ALIGN="CENTER">
  	<TD ALIGN="RIGHT">Votes</TD>
	<TD>&nbsp;</TD>
	<TD>0</TD>
	<TD>0</TD>
	<TD>0</TD>
	<TD>8</TD>
	<TD>7</TD>
	<TD>&nbsp;</TD>
	<TD>&nbsp;</TD>
    <td align="center" ROWSPAN="4">
		<TABLE CELLSPACING="6">
			<TR>
				<TD VALIGN="MIDDLE" ALIGN="CENTER">
			Responses:&nbsp;15 <BR>
	                  Average:&nbsp;4.46667<BR>&nbsp;<BR>
					  
					  1=Poor, 5=Excellent
				</TD>
				<TD VALIGN="MIDDLE" ALIGN="CENTER">   <input type="hidden" name="contentID" value="10126">
			
				
					 <!-- Vignette StoryServer 4 Wed Oct 26 09:25:20 2005 -->
   
		   

	   <TABLE BORDER="0" CELLSPACING="0" CELLPADDING="1" ALIGN="CENTER">
  <TR ALIGN="CENTER">
	  <TD>1</TD>
	  <TD>2</TD>
	  <TD>3</TD>
	  <TD>4</TD>
	  <TD>5</TD>
  </TR>
  <TR ALIGN="CENTER">
    <TD><input type="radio" name="rating"  value="1" ></TD>
    <TD><input type="radio"  name="rating"  value="2" ></TD>
    <TD><input type="radio"  name="rating" value="3" ></TD>
	<TD><input type="radio"  name="rating" value="4" ></TD>
    <TD><input type="radio"  name="rating" value="5" ></TD>
  </TR>
</TABLE>
	 	 
<input type="submit" name="Submit Rating" value="Rate Article">
<!-- end of rating component-->  <BR>
		  		</td>
				<TD>
				<SPAN CLASS="body3"><A HREF="http://threads.borland.com/threads/threads.exe/add?&sysid=1&contentid=10126&title=Delphi 3 - Delphi and Microsoft Office: Automating Excel and Word">Add</a> or 
<A HREF="http://threads.borland.com/threads/threads.exe/thread?&sysid=1&contentid=10126&title=Delphi 3 - Delphi and Microsoft Office: Automating Excel and Word">View</a> comments
				
</TD>
		 	 </TR>
		  </TABLE>

</TD>
	 <TD ROWSPAN="4"><!-- Vignette StoryServer 4 Wed Oct 26 03:05:17 2005 -->

	
	
	 
	 
	 <IMG SRC="/images/leftnav/spacer.gif" ALT="" width='80'  height='1'  BORDER='0'></TD>
	</TR>
    <TR VALIGN="BOTTOM" ALIGN="CENTER">
   	  <td ALIGN="RIGHT">&nbsp;</td>
	  <td ALIGN="RIGHT"><!-- Vignette StoryServer 4 Wed Oct 26 03:05:17 2005 -->

	
	
	 
	 
	 <IMG SRC="/images/leftnav/spacer.gif" ALT="" width='10'  height='20'  BORDER='0'></td>
	  <td width="20" ALIGN="CENTER"><IMG SRC="/images/layout/bar_blue.gif" WIDTH="20" HEIGHT="0" ALT="0 rated this 1"></td>
      <td width="20" ALIGN="CENTER"><IMG SRC="/images/layout/bar_blue.gif" WIDTH="20" HEIGHT="0" ALT="0 rated this 2"></td>
      <td width="20" ALIGN="CENTER"><IMG SRC="/images/layout/bar_blue.gif" WIDTH="20" HEIGHT="0" ALT="0 rated this  3"></td>
      <td width="20" ALIGN="CENTER"><IMG SRC="/images/layout/bar_blue.gif" WIDTH="20" HEIGHT="80" ALT="8 rated this 4"></td>
      <td width="20" ALIGN="CENTER"><IMG SRC="/images/layout/bar_blue.gif" WIDTH="20" HEIGHT="70" ALT="7 rated this 5"></td>
	  <td ALIGN="RIGHT"><!-- Vignette StoryServer 4 Wed Oct 26 03:05:17 2005 -->

	
	
	 
	 
	 <IMG SRC="/images/leftnav/spacer.gif" ALT="" width='10'  height='20'  BORDER='0'></td>
      <td ALIGN="RIGHT">&nbsp;</td>
	  <td ALIGN="RIGHT">&nbsp;</td>
    </tr>
    <tr ALIGN="CENTER"> 
		<td ALIGN="RIGHT">Rating</td>
		<td>&nbsp;</td>
        <td ALIGN="CENTER">1</td>
    	 <td ALIGN="CENTER">2</td>
       <td ALIGN="CENTER">3</td>
       <td ALIGN="CENTER">4</td>
       <td ALIGN="CENTER">5</td>
       <td ALIGN="RIGHT">&nbsp;</td>
	   <td ALIGN="RIGHT">&nbsp;</td>
    </tr>
   
	<TR height="1">
  	  <TD COLSPAN="11" align="LEFT" valign="top"><!-- Vignette StoryServer 4 Wed Oct 26 03:05:16 2005 -->

	
	
	 
	 
	 <IMG SRC="/images/layout/bar_blue.gif" ALT="Blue Bar" width='700'  height='1'  BORDER='0'></TD>
	</tr>
  </table>
  <TABLE WIDTH="100%" ALIGN="CENTER"><TR><TD><IMG SRC="/images/layout/transparent.gif" ALT="" WIDTH="2"  HEIGHT="100"  BORDER="0"></TD></TR></TABLE><BR>
</form><a name="rating">&nbsp;</a>
<!-- end of rating component-->  </DIV><!--end content channel-->
      <!-- END: Content Area -->
 <!--end content td-->   
<!-- END: Page Body -->

	
	


		<!-- Vignette StoryServer 4 Sun Oct 23 14:54:50 2005 -->
<br style="clear: both;" />


<div id="footer-wrap">
	<div id="footer">
 		Borland&reg; Copyright&copy; 1994 - 2005 Borland Software Corporation. All rights reserved<br />
    <a href="http://www.borland.com/us/piracy/">Report Piracy</a> 
    | <a href="http://www.borland.com/us/website/legal.html">Legal Notices</a> 
<!-- | <a href="http://www.borland.com/us/resources/site_map.html">Site-> Map</a>--> 
    | <a href="http://www.borland.com/us/website/privacy.html">Privacy 
    Policy</a></div>
</div>
 </TD></TR></TABLE>
		
	 <!-- Vignette StoryServer 4 Wed May 15 11:28:33 2002 -->
</BODY>
 
</HTML>
